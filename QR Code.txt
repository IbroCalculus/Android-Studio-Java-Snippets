
REQUIREMENTS
-text entry
-button
-ImageView

NOTE: The process of creating the QR Code is called the encoding part
      The process of getting the data from the QR Code is called the decoding part

======================= GENERATE QR CODE (Encoding) ========================

USE DEPENDENCY (https://github.com/androidmads/QRGenerator)

implementation 'androidmads.library.qrgenearator:QRGenearator:1.0.4'
implementation 'com.google.zxing:core:3.3.2'

         et_barCodeText = findViewById(R.id.et_barCodeText);
         btn_Generate = findViewById(R.id.btn_Generate);
         btn_Scan = findViewById(R.id.btn_Scan);
         imageView = findViewById(R.id.imageView);


         btn_Generate.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
                 String value = et_barCodeText.getText().toString();

                 //QRGContents.Type.OTHER OPTIONS APART FROM TEXT, DEPENDING ON THE DATA TYPE PASSED
                 //dimension: 2000 is changeable. The higher, the clearer
                 QRGEncoder qrgEncoder = new QRGEncoder(value, null, QRGContents.Type.TEXT, 2000);
                 qrgEncoder.setColorBlack(Color.BLACK); //QRCode Color
                 qrgEncoder.setColorWhite(Color.BLUE); //QRBackground Color

                 Bitmap QRbitmap = qrgEncoder.getBitmap();
                 imageView.setImageBitmap(QRbitmap);
                 
             }
         });

======================= SCAN QR CODE (Decoding) ========================

USE DEPENDENCY (https://github.com/yuriy-budiyev/code-scanner)
implementation 'com.budiyev.android:code-scanner:2.1.0'

USE PERMISSION
    <uses-permission android:name="android.permission.CAMERA"/>


CREATE A SECOND ACTIVITY WHERE THE SCANNER WILL BE: ie. Scanner

-------- ON SECOND ACTIVITY, ie: Scanner; Use xml as shown:

<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".Scanner">

    <com.budiyev.android.codescanner.CodeScannerView
        android:id="@+id/scanner_view"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        app:autoFocusButtonColor="@android:color/white"
        app:autoFocusButtonVisible="true"
        app:flashButtonColor="@android:color/white"
        app:flashButtonVisible="true"
        app:frameColor="@android:color/white"
        app:frameCornersSize="50dp"
        app:frameCornersRadius="0dp"
        app:frameAspectRatioWidth="1"
        app:frameAspectRatioHeight="1"
        app:frameSize="0.75"
        app:frameThickness="2dp"
        app:maskColor="#77000000">

    </com.budiyev.android.codescanner.CodeScannerView>

    <TextView
        android:id="@+id/txt_ScannedResult"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginBottom="24dp"
        android:text="TextView"
        android:textSize="36sp"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="@+id/scanner_view"
        app:layout_constraintStart_toStartOf="@+id/scanner_view" />


</androidx.constraintlayout.widget.ConstraintLayout>


-------- ON FIRST ACTIVITY, ie: MainActivity

         btn_Scan.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {

                 Intent intent = new Intent(getApplicationContext(), Scanner.class);
                 startActivity(intent);
             }
         });


-------- ON SECOND ACTIVITY, ie: Scanner; Use Java as shown: