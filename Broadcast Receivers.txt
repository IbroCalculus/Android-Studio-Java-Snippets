
 Broadcast receiver is a messaging system used on android devices between the android OS and android applications.
 Broadcast messaging system can be used between 2 applications. One application can send a broadcast to another application, although the most common is between the android OS and the mobile application.
 The android OS shares device related information with android applications.

 The broadcast messages are sent when an event of interest occurs.
 For example, System Boots, Device Starts Charging, when the charge of the device is low, on enter airplane mode, on connected to etc.
 
 When a broadcast is sent, the system automatically routes broadcasts to apps that have subscribed to receive that particular type of broadcast.
-------------------------------------------------------------------------------------------------------------------------------------------------


------------------ Method A. (Very similar to method B, just how code is optimized, B seems shorter) --------------------------------

========== 1. CREATE A BROADCAST RECEIVER CLASS, ie BroadcastReceiverClass, extend BroadCastReceiver and implement the method; ========

public class BroadcastReceiverClass extends BroadcastReceiver {
    
    @Override
    public void onReceive(Context context, Intent intent) {
        
    }
}

========= 2. WITHIN JAVA CLASS ============

//TO GET LIST OF BROADCAST ACTIONS: C:\Users\isuleiman\AppData\Local\Android\Sdk\platforms\android-29\data\broadcast_actions.txt

    TextView tvDisplay;
    BroadcastReceiverClass broadcastReceiverClass;

        setContentView(R.layout.activity_main);

        tvDisplay = findViewById(R.id.tvDisplay);
        broadcastReceiverClass = new BroadcastReceiverClass();


    @Override
    protected void onStart() {
        super.onStart();

        IntentFilter intentFilter = new IntentFilter();

        //You may choose action you want broadcast_received. Can also view and use more actions in broadcast_actions.txt
        intentFilter.addAction(Intent.ACTION_AIRPLANE_MODE_CHANGED);
        //intentFilter.addAction("android.net.conn.CONNECTIVITY_CHANGE");  //got ..WIFI_STATE_CHANGED from broadcast_actions.txt

        // BETTER DECLARE AND USE: public static final String CONNECTION_CHANGED  = "android.net.conn.CONNECTIVITY_CHANGE";
        // Hence: intentFilter.addAction(CONNECTION_CHANGED);

        this.registerReceiver(broadcastReceiverClass, intentFilter);
    }

    @Override
    protected void onStop() {
        super.onStop();
        
        if(broadcastReceiverClass != null){
            this.unregisterReceiver(broadcastReceiverClass);
        }
    }


======== 3. WITHIN BroadcastReceiverClass ===============

    @Override
    public void onReceive(Context context, Intent intent) {

        boolean isPlaneMode = intent.getBooleanExtra("state", false); //state is keyword.

        if(isPlaneMode == true){
            Toast.makeText(context, "In airplane mode", Toast.LENGTH_SHORT).show();
        }else{
            Toast.makeText(context, "Not in airplane mode", Toast.LENGTH_SHORT).show();
        }

    }


------------------ Method B. (Very similar to method B, just how code is optimized, B seems shorter) --------------------------------

========== 1. CREATE A BROADCAST RECEIVER CLASS, ie AirplaneModeReceiver, extend BroadCastReceiver and implement the method; ========

public class AirplaneModeReceiver extends BroadcastReceiver {

    @Override
    public void onReceive(Context context, Intent intent) {

        if(intent.getAction() != null && intent.getAction().equals(Intent.ACTION_AIRPLANE_MODE_CHANGED)){
            boolean isAirplaneModeOn = intent.getBooleanExtra("state", false);
            String msg = isAirplaneModeOn ? "Airplane mode is ON": "Airplane mode is OFF";
            Toast.makeText(context,  msg, Toast.LENGTH_LONG).show();
        }

    }
}


========= 2. WITHIN JAVA CLASS ============
    AirplaneModeReceiver airplaneModeReceiver;


        IntentFilter intentFilter = new IntentFilter("android.intent.action.AIRPLANE_MODE");
        airplaneModeReceiver = new AirplaneModeReceiver();
        registerReceiver(airplaneModeReceiver,intentFilter);











