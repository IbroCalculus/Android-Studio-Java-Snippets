
NB: THIS AUDIO DOES NOT RUN IN THE BACKGROUND, TO LEARN ABOUT THAT, LEARN ABOUT SERVICES.

Create directory of type raw and place sound files inside.

    MediaPlayer mediaPlayer;
 
===========================	TO PLAY SOUND	======================================
    
    private void playSound() {
        if(mediaPlayer == null)
        {
            mediaPlayer = MediaPlayer.create(this, R.raw.sound1);
            //mediaPlayer = MediaPlayer.create(this, Uri.parse("http://www.music.com/m1.mp3"));
            //mediaPlayer.setLooping(true);
            mediaPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                @Override
                public void onCompletion(MediaPlayer mediaPlayer) {
                    stopSound();
                }
            });
        }
        mediaPlayer.start();
    }

===========================	TO PAUSE SOUND	======================================

    private void pauseSound() {
        if(mediaPlayer != null){
            mediaPlayer.pause();
        }
    }

===========================	TO STOP SOUND	======================================

    private void stopSound() {
        if(mediaPlayer != null){
            mediaPlayer.release();
            mediaPlayer = null;
        }
    }

//To release memory after closing application. To make music play in background, more research on services.
    @Override
    protected void onStop() {
        super.onStop();
        stopSound();
    }

NB: Other methods like mediaPlayer.Pause(), .stop() etc IN PLACE OF 


======================= CONTROL AUDIO VOLUME USING SEEKBAR ======================
NB: Maximum volume varies from devices, hence all can't be of value of range 0 - 100;

    AudioManager audioManager;

        setContentView(R.layout.activity_main);

        audioManager = (AudioManager) getSystemService(AUDIO_SERVICE);

        int maxVolume = audioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC);
        int currentVolume = audioManager.getStreamVolume(AudioManager.STREAM_MUSIC); //Get the current volume

        seekBar.setMax(maxVolume);

        seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
            @Override
            public void onProgressChanged(SeekBar seekBar, int i, boolean b) {

                audioManager.setStreamVolume(AudioManager.STREAM_MUSIC, i, 0);

            }

======================  GET DURATION OF MUSIC =========================
	mediaPlayer.getDuration() //milliseconds
        //THE BELOW CODE MAY BE USEFUL, USED IT IN AN ANDROID APP TO GET DURATION IN MIN & SEC
                int durationX = (mediaPlayer.getDuration()/1000)/60;
                int durationY = (mediaPlayer.getDuration()%1000)%60;
                tv_Duration.setText(String.valueOf(durationX + ":" + durationY));


======================  SEEK POSITION OF MUSIC (FORWARD OR BACKWARD) =========================
        int maxDuration = mediaPlayer.getDuration();
        seekBar2.setMax(maxDuration);



	mediaPlayer.getCurrentPosition()
	mediaPlayer.seekTo(intValue)
















